#! /usr/bin/env python
"""[...]/bin/unpack-test-repos

This script is expected to be called from a testcase directory,
and unpackes the archive expected to contain the git directories
used by the testcase.
"""

from gnatpython.ex import Run
from gnatpython.fileutils import mv
from os import unlink
from os.path import exists, isdir, isfile
from sys import exit, stderr

def fatal(msg):
    print >> stderr, 'ERROR: %s.' % msg
    print >> stderr, 'Aborting.'
    exit(1)

# The infrastructure assumes that the repositories are archives
# inside a tarball called git-repos.tar.gz.
REPOS_TARBALL='git-repos.tar.bz2'

# The config file to be used in the bare repository...
BARE_REPO_CONFIG='bare_repo_config'

if not exists(REPOS_TARBALL):
    fatal("Cannot find repositories' tarball: %s" % REPOS_TARBALL)

if not exists(BARE_REPO_CONFIG):
    fatal("Cannot find config file for bare repository: %s" % BARE_REPO_CONFIG)

r = Run(['tar', 'xvfj', REPOS_TARBALL])
if r.status != 0:
    # The packing operation failed. Print an error message, and exit.
    print >> stderr, 'ERROR: tar failed to unpack repositories:'
    print >> stderr, r.out
    exit(r.status)

if not isdir('repo'):
    fatal('Directory "repo" does not exist')
if not isdir('repo/.git'):
    fatal('Directory "repo" does not appear to be a git repository')
if not isdir('bare/repo.git'):
    fatal('Directory "bare/repo.git" does not exist')

# Determine the location of the bare/repo.git's config file.
# It depends on whether the repository is a bare repository or not.
if isdir('bare/repo.git/.git'):
    bare_repo_config_path='bare/repo.git/.git/config'
else:
    bare_repo_config_path='bare/repo.git/config'

# Move our config file in place, after having verified that we are not
# about to overwrite one.
if isfile(bare_repo_config_path):
    fatal('Unexpected config file in bare repository: %s'
          % bare_repo_config_path)
mv(BARE_REPO_CONFIG, bare_repo_config_path)

# Temporary: Get the hooks configuration portion from that special
# file in that special branch, and merge it into the bare repository's
# configuration file. Eventually, this will become unnecessary, as
# the hooks will be looking directly inside original location.
with open(bare_repo_config_path, 'a') as fd:
    r = Run('git show refs/meta/config:project.config'.split(),
            cwd='bare/repo.git', output=fd, error=stderr)
    if r.status != 0:
        fatal('cannot find project.config file in refs/meta/config (err: %d)',
              r.status)

unlink(REPOS_TARBALL)
